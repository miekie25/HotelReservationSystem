/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hotelreservationsystem;

import hotelreservationsystem.GUIs.GuestHomePage;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.time.LocalDate;
import javax.swing.JOptionPane;

/**
 *
 * @author Mikaela Padayachie
 */
public class LogInScreen extends javax.swing.JFrame {

    /**
     * Creates new form LogInScreenOne
     */
    public LogInScreen() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnExit = new javax.swing.JButton();
        btnMenu = new javax.swing.JButton();
        lblLogIn = new javax.swing.JLabel();
        lblEnterUsername = new javax.swing.JLabel();
        lblEnterPassword = new javax.swing.JLabel();
        pwfEnterPassword = new javax.swing.JPasswordField();
        txtfEnterUsername = new javax.swing.JTextField();
        btnNext = new javax.swing.JButton();
        lblBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnExit.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        btnExit.setText("exit");
        btnExit.setToolTipText("click here to terminate your reservation");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnMenu.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        btnMenu.setText("menu");
        btnMenu.setToolTipText("click here for menu");
        btnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuActionPerformed(evt);
            }
        });

        lblLogIn.setFont(new java.awt.Font("Arial Black", 0, 24)); // NOI18N
        lblLogIn.setForeground(new java.awt.Color(0, 0, 255));
        lblLogIn.setText("Log-In");

        lblEnterUsername.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblEnterUsername.setText("Enter username:");

        lblEnterPassword.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblEnterPassword.setText("Enter password:");

        pwfEnterPassword.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        pwfEnterPassword.setToolTipText("enter password");

        txtfEnterUsername.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtfEnterUsername.setToolTipText("enter username");
        txtfEnterUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfEnterUsernameActionPerformed(evt);
            }
        });

        btnNext.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        btnNext.setText("log-in");
        btnNext.setToolTipText("go to next screen");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/white background.jpg"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnExit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnMenu))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEnterUsername)
                            .addComponent(lblEnterPassword))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblLogIn)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(pwfEnterPassword)
                                .addComponent(txtfEnterUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE))
                            .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 61, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lblBackground, javax.swing.GroupLayout.PREFERRED_SIZE, 484, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnExit)
                            .addComponent(btnMenu))
                        .addGap(39, 39, 39))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblLogIn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEnterUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtfEnterUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEnterPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pwfEnterPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lblBackground, javax.swing.GroupLayout.PREFERRED_SIZE, 243, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // This method confirms if the user wants to end the program upon pressing the 'exit' button
        int choice = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to exit?\nThis will terminate your current process of making a reservation.",
                "Exit Confirmation", // Displays a confirmation dialog with a warning message
                JOptionPane.YES_NO_OPTION, // Provides Yes and No button
                JOptionPane.WARNING_MESSAGE // Uses a warning icon
        );

        if (choice == JOptionPane.YES_OPTION) {
            System.exit(0); // Terminates the program
        }
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // Retrieves the entered username and password from input fields
        String enteredUsername = txtfEnterUsername.getText();
        String enteredPassword = new String(pwfEnterPassword.getPassword());

        // Attempts to authenticate as a Guest
        Guest guest = authenticateGuest(enteredUsername, enteredPassword);

        // Attempts to authenticate as a Staff member
        Staff staff = authenticateStaff(enteredUsername, enteredPassword);

        if (guest != null) {
            // Guest successfully logged in
            // Navigates to the guest's home page
            new GuestHomePage(enteredUsername, enteredPassword).setVisible(true); // Takes user to GuestHomePage screen
            this.setVisible(false); // Closes the current screen 
        } else if (staff != null) {
            // Staff member successfully logged in
            // Navigates to the staff's home page
            new StaffHomePage(enteredUsername).setVisible(true); // Takes user to StaffHomePage screen
            this.setVisible(false); // Closes the current screen 
        } else {
            // Invalid credentials, shows an error message
            JOptionPane.showMessageDialog(this, "Invalid username or password.", "Authentication Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnNextActionPerformed

    private void txtfEnterUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfEnterUsernameActionPerformed

    }//GEN-LAST:event_txtfEnterUsernameActionPerformed

    private void btnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuActionPerformed
        new Menu().setVisible(true);
    }//GEN-LAST:event_btnMenuActionPerformed

    // Authenticates a Guest based on provided username and password
    private Guest authenticateGuest(String username, String password) {

        // Defines the database connection URL
        String databaseURL = "jdbc:ucanaccess://HotelReservation.accdb";

        // Initializes the authenticatedGuest variable to null
        Guest authenticatedGuest = null;

        try (Connection connection = DriverManager.getConnection(databaseURL)) {
            // Builds the SQL string for the select statement
            String sql = "SELECT * FROM tblGuest WHERE GuestUsername = ? AND GuestPassword = ?";

            // Creates the prepared statement
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, username);
            statement.setString(2, password);

            // Executes the query
            ResultSet resultSet = statement.executeQuery();

            // Checks if a result was returned
            if (resultSet.next()) {
                // Extracts guest information from the result set
                String phoneNumber = resultSet.getString("CellphoneNumber");
                String emailAddress = resultSet.getString("EmailAddress");
                LocalDate checkInDate = resultSet.getDate("CheckInDate").toLocalDate();
                LocalDate checkOutDate = resultSet.getDate("CheckOutDate").toLocalDate();

                // Creates a Guest object representing the authenticated guest
                authenticatedGuest = new Guest(username, password, null, null, phoneNumber, emailAddress, checkInDate, checkOutDate);
            }
        } catch (Exception ex) {
            // Handles any exceptions that may occur during database access
            System.out.println("UNABLE TO AUTHENTICATE GUEST");
        }

        // Returns the authenticatedGuest (null if authentication failed)
        return authenticatedGuest;
    }

    // Authenticates a Staff based on provided username and password
    public static Staff authenticateStaff(String username, String password) {
        // Defines the database connection URL
        String databaseURL = "jdbc:ucanaccess://HotelReservation.accdb";

        // Initializes the authenticatedStaff variable to null
        Staff authenticatedstaff = null;

        // Initializes the connection variable to null
        Connection connection = null;

        try {
            // Builds the SQL string for the select statement
            String sql = "SELECT * FROM tblStaff WHERE StaffUsername = ? AND StaffPassword = ?";

            // Establishes a database connection
            connection = DriverManager.getConnection(databaseURL);

            // Creates a prepared statement with placeholders for username and password
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, username);
            statement.setString(2, password);

            // Executes the query and retrieve the result set
            ResultSet resultSet = statement.executeQuery();

            // Checks if a result was returned
            if (resultSet.next()) {
                // Extracts staff information from the result set
                String jobPosition = resultSet.getString("JobPosition");
                String firstName = resultSet.getString("FirstName");
                String lastName = resultSet.getString("LastName");

                // Creates a Staff object representing the authenticated staff member
                authenticatedstaff = new Staff(jobPosition, username, password, firstName, lastName);
            }
        } catch (Exception ex) {
            // Handles any exceptions that may occur during database access by printing the stack trace
            System.out.println("UNABLE TO AUHTENTICATE STAFF MEMEBER");
        } finally {
            // Closes the database connection in the finally block to ensure it's closed even if an exception occurs
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    System.out.println("UNABLE TO AUHTENTICATE STAFF MEMEBER");
                }
            }
        }
        // Returns the authenticatedStaff (null if authentication failed)
        return authenticatedstaff;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LogInScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LogInScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LogInScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LogInScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LogInScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnMenu;
    private javax.swing.JButton btnNext;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblEnterPassword;
    private javax.swing.JLabel lblEnterUsername;
    private javax.swing.JLabel lblLogIn;
    private javax.swing.JPasswordField pwfEnterPassword;
    private javax.swing.JTextField txtfEnterUsername;
    // End of variables declaration//GEN-END:variables
}
