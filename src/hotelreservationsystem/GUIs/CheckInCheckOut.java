/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hotelreservationsystem.GUIs;

import hotelreservationsystem.Menu;
import hotelreservationsystem.PersonalAndContactDetails;
import hotelreservationsystem.ReservationDataController;
import hotelreservationsystem.WelcomeScreen;
import java.time.LocalDate;
import javax.swing.JOptionPane;

/**
 * Users choose their check in and check out dates from this screen.
 *
 * @author Mikaela Padayachie
 */
public final class CheckInCheckOut extends javax.swing.JFrame {

    private int checkInDay;
    private int checkInMonth;
    private int checkInYear;
    private int checkOutDay;
    private int checkOutMonth;
    private int checkOutYear;

    // Defines the database connection URL
    String databaseURL = "jdbc:ucanaccess://HotelReservation.accdb";

    // Variables created to withhold the combined check-in and check-out dates
    private static LocalDate checkInDate;
    private static LocalDate checkOutDate;

    /**
     * Creates new form CheckInCheckOut
     *
     */
    public CheckInCheckOut() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        lblBackground3 = new javax.swing.JLabel();
        lblBackground4 = new javax.swing.JLabel();
        lblBackground5 = new javax.swing.JLabel();
        lblSelectDateHeading = new javax.swing.JLabel();
        lblCheckIn = new javax.swing.JLabel();
        cbMonthCheckIn = new javax.swing.JComboBox<>();
        cbDayCheckIn = new javax.swing.JComboBox<>();
        lblCheckInDay = new javax.swing.JLabel();
        lblCheckInMonth = new javax.swing.JLabel();
        cbYearCheckIn = new javax.swing.JComboBox<>();
        lblCheckInYear = new javax.swing.JLabel();
        lblCheckOut = new javax.swing.JLabel();
        lblCheckOutDay = new javax.swing.JLabel();
        cbDayCheckOut = new javax.swing.JComboBox<>();
        lblCheckOutMonth = new javax.swing.JLabel();
        cbMonthCheckOut = new javax.swing.JComboBox<>();
        lblCheckOutYear = new javax.swing.JLabel();
        cbYearCheckOut = new javax.swing.JComboBox<>();
        btnNext = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnMenu = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        lblBackground = new javax.swing.JLabel();

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/white background.jpg"))); // NOI18N

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/white background.jpg"))); // NOI18N

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/white background.jpg"))); // NOI18N

        lblBackground3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/white background.jpg"))); // NOI18N

        lblBackground4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/white background.jpg"))); // NOI18N

        lblBackground5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/white background.jpg"))); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblSelectDateHeading.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        lblSelectDateHeading.setForeground(new java.awt.Color(0, 0, 255));
        lblSelectDateHeading.setText("Please select your check-in and check-out dates");

        lblCheckIn.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        lblCheckIn.setText("check-in");

        cbMonthCheckIn.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        cbMonthCheckIn.setMaximumRowCount(12);
        cbMonthCheckIn.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        cbMonthCheckIn.setToolTipText("click on the drop-down arrow and select a month");

        cbDayCheckIn.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        cbDayCheckIn.setMaximumRowCount(31);
        cbDayCheckIn.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        cbDayCheckIn.setToolTipText("click on the drop-down arrow and select a day");

        lblCheckInDay.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        lblCheckInDay.setText("day");

        lblCheckInMonth.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        lblCheckInMonth.setText("month");

        cbYearCheckIn.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        cbYearCheckIn.setMaximumRowCount(2);
        cbYearCheckIn.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2023", "2024" }));
        cbYearCheckIn.setToolTipText("click on the drop-down arrow and select a year");
        cbYearCheckIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbYearCheckInActionPerformed(evt);
            }
        });

        lblCheckInYear.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        lblCheckInYear.setText("year");

        lblCheckOut.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        lblCheckOut.setText("check-out");

        lblCheckOutDay.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        lblCheckOutDay.setText("day");

        cbDayCheckOut.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        cbDayCheckOut.setMaximumRowCount(31);
        cbDayCheckOut.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        cbDayCheckOut.setToolTipText("click on the drop-down arrow and select a day");

        lblCheckOutMonth.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        lblCheckOutMonth.setText("month");

        cbMonthCheckOut.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        cbMonthCheckOut.setMaximumRowCount(12);
        cbMonthCheckOut.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        cbMonthCheckOut.setToolTipText("click on the drop-down arrow and select a month");
        cbMonthCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMonthCheckOutActionPerformed(evt);
            }
        });

        lblCheckOutYear.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        lblCheckOutYear.setText("year");

        cbYearCheckOut.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        cbYearCheckOut.setMaximumRowCount(2);
        cbYearCheckOut.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2023", "2024" }));
        cbYearCheckOut.setToolTipText("click on the drop-down arrow and select a year");

        btnNext.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        btnNext.setText("next");
        btnNext.setToolTipText("go to next screen");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        btnBack.setText("back");
        btnBack.setToolTipText("go to previous screen");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnMenu.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        btnMenu.setText("menu");
        btnMenu.setToolTipText("click here for menu");
        btnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuActionPerformed(evt);
            }
        });

        btnExit.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        btnExit.setText("exit");
        btnExit.setToolTipText("click here to terminate your reservation");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/white background.jpg"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(204, 204, 204)
                                .addComponent(lblCheckIn))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(196, 196, 196)
                                .addComponent(lblCheckOut)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(lblSelectDateHeading)
                                .addGap(0, 6, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack)
                                .addGap(41, 41, 41)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cbDayCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnNext))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblCheckOutDay, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(cbDayCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(11, 11, 11)
                                                    .addComponent(lblCheckInDay, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(54, 54, 54)
                                                .addComponent(lblCheckOutMonth)
                                                .addGap(10, 10, 10))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(55, 55, 55)
                                                .addComponent(cbMonthCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(56, 56, 56)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(cbMonthCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblCheckInMonth))))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblCheckOutYear, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(69, 69, 69)
                                                    .addComponent(lblCheckInYear, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(58, 58, 58)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(cbYearCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(cbYearCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                        .addGap(40, 40, 40))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnExit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnMenu)))))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 257, Short.MAX_VALUE)
                    .addComponent(jLabel11)
                    .addGap(0, 258, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lblBackground, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMenu)
                    .addComponent(btnExit))
                .addGap(13, 13, 13)
                .addComponent(lblSelectDateHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnNext)
                            .addComponent(btnBack)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblCheckIn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCheckInDay)
                            .addComponent(lblCheckInMonth)
                            .addComponent(lblCheckInYear))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbMonthCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbDayCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbYearCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44)
                        .addComponent(lblCheckOut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCheckOutMonth)
                            .addComponent(lblCheckOutDay)
                            .addComponent(lblCheckOutYear))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbDayCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbMonthCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbYearCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 33, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 160, Short.MAX_VALUE)
                    .addComponent(jLabel11)
                    .addGap(0, 161, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lblBackground, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void cbYearCheckInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbYearCheckInActionPerformed
        
    }//GEN-LAST:event_cbYearCheckInActionPerformed

    private void cbMonthCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMonthCheckOutActionPerformed
       
    }//GEN-LAST:event_cbMonthCheckOutActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // This method confirms if the user wants to end the program upon pressing the 'exit' button
        int choice = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to exit?\nThis will terminate your current process of making a reservation.",
                "Exit Confirmation", // Displays a confirmation dialog with a warning message
                JOptionPane.YES_NO_OPTION, // Provides Yes and No button
                JOptionPane.WARNING_MESSAGE // Uses a warning icon
        );

        if (choice == JOptionPane.YES_OPTION) {
            System.exit(0); // Terminates the program
        }
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        new WelcomeScreen().setVisible(true); // Takes user back to the WelcomeScreen
        this.setVisible(false); // Closes the screen once the user has made a selection
    }//GEN-LAST:event_btnBackActionPerformed
    private boolean isDateValid(int day, int month, int year) {
        // Validates the date based on month and year
        boolean isValid = true;

        // Checks if the selected year is valid
        if (year == 2023) {
            // Checks if the selected month is valid
            if (month == 2) { // February
                // Checks if the selected day is valid for February
                if (day < 1 || day > 28) {
                    isValid = false;
                }
            } else if (month == 4 || month == 6 || month == 9 || month == 11) {
                // Checks if the selected day is valid for April, June, September, or November
                if (day < 1 || day > 30) {
                    isValid = false;
                }
            } else {
                // Checks if the selected day is valid for all other months
                if (day < 1 || day > 31) {
                    isValid = false;
                }
            }
        } else if (year == 2024) {
            // Checks if the selected month is valid
            if (month == 2) { // February
                // Checks if the selected day is valid for February in a leap year
                if (day < 1 || day > 29) {
                    isValid = false;
                }
            } else if (month == 4 || month == 6 || month == 9 || month == 11) {
                // Checks if the selected day is valid for April, June, September, or November
                if (day < 1 || day > 30) {
                    isValid = false;
                }
            } else {
                // Checks if the selected day is valid for all other months
                if (day < 1 || day > 31) {
                    isValid = false;
                }
            }
        } else {
            // Invalid year
            isValid = false;
        }

        return isValid;
    }

    private boolean isDateAvailable(int day, int month, int year) {
        // Check if the selected date is already occupied in the database
        boolean isAvailable = true;
        return isAvailable;
    }


    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
       // Gets check-in day, month and year from the GUI
        int selectedDayCheckIn = Integer.parseInt(cbDayCheckIn.getSelectedItem().toString());
        int selectedMonthCheckIn = Integer.parseInt(cbMonthCheckIn.getSelectedItem().toString());
        int selectedYearCheckIn = Integer.parseInt(cbYearCheckIn.getSelectedItem().toString());

        // Gets check-out dat, month and year from the GUI
        int selectedDayCheckOut = Integer.parseInt(cbDayCheckOut.getSelectedItem().toString());
        int selectedMonthCheckOut = Integer.parseInt(cbMonthCheckOut.getSelectedItem().toString());
        int selectedYearCheckOut = Integer.parseInt(cbYearCheckOut.getSelectedItem().toString());

        LocalDate checkInDate;
        LocalDate checkOutDate;

        try {
            // Creates checkInDate and checkOutDate objects
            checkInDate = LocalDate.of(selectedYearCheckIn, selectedMonthCheckIn, selectedDayCheckIn);
            checkOutDate = LocalDate.of(selectedYearCheckOut, selectedMonthCheckOut, selectedDayCheckOut);
        } catch (java.time.DateTimeException e) {
            // Catches the exception and display an error message
            JOptionPane.showMessageDialog(
                    this,
                    "Invalid date selected. Please select valid dates.",
                    "Date Validation Error",
                    JOptionPane.ERROR_MESSAGE
            );
            return; // Exit the method to prevent further execution
        }

       // Sets checkInDate anc checkOutDate information in ReservationDataController class
        ReservationDataController.setCheckInDate(checkInDate);
        ReservationDataController.setCheckOutDate(checkOutDate);

        // Checks if checkInDate and checkOutDate are valid
        boolean isCheckInDateValid = isDateValid(selectedDayCheckIn, selectedMonthCheckIn, selectedYearCheckIn);
        boolean isCheckOutDateValid = isDateValid(selectedDayCheckOut, selectedMonthCheckOut, selectedYearCheckOut);

        if (isCheckInDateValid && isCheckOutDateValid) {
            new PersonalAndContactDetails(checkInDate, checkOutDate).setVisible(true); // If they are valid, naviagtes to PersonalAndContactDetails. Passes checkInDate and checkOutDate as well.
            this.setVisible(false); // Closes this screen
        } else {
            // Displats error messages
            JOptionPane.showMessageDialog(this, "Invalid check-in or check-out date. Please select valid dates.", "Date Validation Error", JOptionPane.ERROR_MESSAGE);
            if (!isDateAvailable(selectedDayCheckIn, selectedMonthCheckIn, selectedYearCheckIn)) {
                JOptionPane.showMessageDialog(this, "The selected check-in date is not available.");
            }

        }
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuActionPerformed
        new Menu().setVisible(true);
    }//GEN-LAST:event_btnMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckInCheckOut.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckInCheckOut.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckInCheckOut.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckInCheckOut.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CheckInCheckOut().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnMenu;
    private javax.swing.JButton btnNext;
    private javax.swing.JComboBox<String> cbDayCheckIn;
    private javax.swing.JComboBox<String> cbDayCheckOut;
    private javax.swing.JComboBox<String> cbMonthCheckIn;
    private javax.swing.JComboBox<String> cbMonthCheckOut;
    private javax.swing.JComboBox<String> cbYearCheckIn;
    private javax.swing.JComboBox<String> cbYearCheckOut;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblBackground3;
    private javax.swing.JLabel lblBackground4;
    private javax.swing.JLabel lblBackground5;
    private javax.swing.JLabel lblCheckIn;
    private javax.swing.JLabel lblCheckInDay;
    private javax.swing.JLabel lblCheckInMonth;
    private javax.swing.JLabel lblCheckInYear;
    private javax.swing.JLabel lblCheckOut;
    private javax.swing.JLabel lblCheckOutDay;
    private javax.swing.JLabel lblCheckOutMonth;
    private javax.swing.JLabel lblCheckOutYear;
    private javax.swing.JLabel lblSelectDateHeading;
    // End of variables declaration//GEN-END:variables
}
